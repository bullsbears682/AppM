version: '3.8'

services:
  # VoidSight Analytics Application
  voidsight-app:
    build: 
      context: .
      dockerfile: Dockerfile.production
    container_name: voidsight-analytics
    restart: unless-stopped
    environment:
      - ENV=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-auto-generated-secret}
      - DATABASE_URL=postgresql://voidsight:${DB_PASSWORD:-secure_password}@postgres:5432/voidsight_analytics
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-auto-generated-jwt-secret}
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME:-}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - LOG_LEVEL=INFO
    ports:
      - "8000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - app_logs:/app/logs
      - app_exports:/app/exports
      - app_uploads:/app/uploads
    networks:
      - voidsight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: voidsight-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=voidsight_analytics
      - POSTGRES_USER=voidsight
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - voidsight-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voidsight -d voidsight_analytics"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: voidsight-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - voidsight-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy & SSL
  nginx:
    image: nginx:alpine
    container_name: voidsight-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - voidsight-app
    networks:
      - voidsight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: voidsight-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - voidsight-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: voidsight-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - voidsight-network

  # Log Aggregation - ELK Stack (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: voidsight-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - voidsight-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log Processing - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: voidsight-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - app_logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - voidsight-network

  # Log Visualization - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: voidsight-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - voidsight-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: voidsight-backup
    restart: "no"
    environment:
      - POSTGRES_DB=voidsight_analytics
      - POSTGRES_USER=voidsight
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/source_data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - voidsight-network
    command: |
      sh -c "
        chmod +x /backup.sh
        while true; do
          sleep 86400  # Daily backups
          /backup.sh
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_exports:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  voidsight-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16