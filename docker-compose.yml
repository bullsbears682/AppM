# Enterprise Infinex ROI Calculator - Production Stack
# Complete containerized deployment with all enterprise services

version: '3.8'

services:
  # Main Application
  app:
    build: 
      context: .
      target: production
      args:
        - BUILD_ENV=production
        - VERSION=3.0.0
    container_name: infinex-roi-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://infinex:${DB_PASSWORD}@postgres:5432/infinex_roi
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "5000:5000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_static:/app/static
    networks:
      - infinex_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: infinex-roi-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=infinex_roi
      - POSTGRES_USER=infinex
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - infinex_network
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: infinex-roi-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - infinex_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: infinex-roi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - app_static:/var/www/static
      - nginx_logs:/var/log/nginx
    networks:
      - infinex_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery_worker:
    build: 
      context: .
      target: production
    container_name: infinex-roi-celery-worker
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://infinex:${DB_PASSWORD}@postgres:5432/infinex_roi
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - infinex_network
    depends_on:
      - postgres
      - redis

  # Celery Beat Scheduler
  celery_beat:
    build: 
      context: .
      target: production
    container_name: infinex-roi-celery-beat
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://infinex:${DB_PASSWORD}@postgres:5432/infinex_roi
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - infinex_network
    depends_on:
      - postgres
      - redis

  # Flower (Celery Monitoring)
  flower:
    build: 
      context: .
      target: production
    container_name: infinex-roi-flower
    restart: unless-stopped
    command: celery -A app.celery flower --port=5555
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    networks:
      - infinex_network
    depends_on:
      - redis

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: infinex-roi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - infinex_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: infinex-roi-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - infinex_network
    depends_on:
      - prometheus

  # Log Management - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: infinex-roi-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - infinex_network

  # Log Management - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: infinex-roi-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - app_logs:/var/log/app
    networks:
      - infinex_network
    depends_on:
      - elasticsearch

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: infinex-roi-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - infinex_network
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: infinex-roi-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - backup_data:/backup
      - ./docker/backup/backup.sh:/backup.sh
    networks:
      - infinex_network
    depends_on:
      - postgres
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    profiles:
      - backup

  # Development Tools (only for development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: infinex-roi-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - infinex_network
    profiles:
      - development

  # Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: infinex-roi-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - infinex_network
    depends_on:
      - postgres
    profiles:
      - development

  # MinIO for File Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: infinex-roi-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    networks:
      - infinex_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

# Networks
networks:
  infinex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_static:
    driver: local
  nginx_logs:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_data:
    driver: local
  pgadmin_data:
    driver: local
  minio_data:
    driver: local